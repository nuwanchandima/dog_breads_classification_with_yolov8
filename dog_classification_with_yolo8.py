# -*- coding: utf-8 -*-
"""dog_classification_with_yolo8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ik_QU3xOEMFIY4Cf5NO_CK6t8xOtD_Up
"""

# pip install --upgrade ultralytics

# pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="************")
project = rf.workspace("roboflow-baravenp").project("deteccion-animal")
version = project.version(1)
dataset = version.download("yolov8")

from ultralytics import YOLO

# Load a COCO-pretrained YOLOv8n model
model = YOLO("yolov8n.pt")

# Display model information (optional)
model.info()

# Train the model on the COCO8 example dataset for 100 epoch s
results = model.train(data="/content/Detecci√≥n-Animal-1/data.yaml", epochs=10, imgsz=640)

from google.colab import files
import os
from PIL import Image
import matplotlib.pyplot as plt

def detectFromImage():
    # Upload file
    uploaded = files.upload()

    # Assuming a single file is uploaded, get the file name
    source_image = list(uploaded.keys())[0]

    # Verify the file path
    print(f"Source image: {source_image}")

    # Load the uploaded image
    image = Image.open(source_image)

    # Display the uploaded image
    plt.figure(figsize=(10, 10))
    plt.imshow(image)
    plt.axis('off')  # Hide axis
    plt.show()

    # Load your trained YOLO model (replace with correct model path if needed)
    trained_model = YOLO("/content/runs/detect/train/weights/best.pt")
    trained_model.info()

    # Perform inference on the uploaded image
    model_results = trained_model(source_image)
    print(model_results)
    model_result = model_results[0]

    # Display results (image with detected labels)
    model_result.show()

     # Extract predicted classes and display them
    class_names = model_result.names  # List of class names
    pred_classes = model_result.boxes.cls  # Predicted class indices
    pred_conf = model_result.boxes.conf  # Prediction confidence scores

    # Print predicted class names and confidence scores
    for idx, conf in zip(pred_classes, pred_conf):
        print(f"Predicted Class: {class_names[int(idx)]}, Confidence: {conf:.2f}")

    # Optionally save and display the prediction result
    result_image_path = "/content/predictions/prediction_result.jpg"

    # Save the image with labels (the plot method is now called with the correct parameters)
    model_result.save(filename=result_image_path)

    # Show the saved prediction result image
    result_image = Image.open(result_image_path)
    plt.figure(figsize=(10, 10))
    plt.imshow(result_image)
    plt.axis('off')
    plt.show()

detectFromImage()

detectFromImage()

detectFromImage()

detectFromImage()

detectFromImage()

detectFromImage()

# prompt: write code for download project files as zip

import shutil

def zip_project_files(output_filename="project_files.zip"):
    """Zips the project files into a specified output file.

    Args:
        output_filename (str, optional): The name of the output zip file. Defaults to "project_files.zip".
    """
    try:
        shutil.make_archive(output_filename.replace(".zip", ""), 'zip', "/content/runs")  # Zip the /content directory
        print(f"Successfully created {output_filename}")
    except Exception as e:
        print(f"Error creating zip file: {e}")


# Example usage: Create a zip file named 'my_project.zip'
zip_project_files("my_project.zip")

# Download the zip file
from google.colab import files
files.download("my_project.zip")